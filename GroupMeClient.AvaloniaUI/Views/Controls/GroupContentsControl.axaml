<UserControl x:Class="GroupMeClient.AvaloniaUI.Views.Controls.GroupContentsControl"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:controls="clr-namespace:GroupMeClient.AvaloniaUI.Views.Controls"
             xmlns:extensions="clr-namespace:GroupMeClient.AvaloniaUI.Extensions"
             xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
             xmlns:ia="clr-namespace:Avalonia.Xaml.Interactions.Core;assembly=Avalonia.Xaml.Interactions"
             xmlns:iconPack="clr-namespace:MicroCubeAvalonia.IconPack;assembly=MicroCubeAvalonia"
             mc:Ignorable="d" d:DesignWidth="500" d:DesignHeight="900"
             Background="{DynamicResource MessageBackdropBrush}">

  <Grid ColumnDefinitions="*"
        RowDefinitions="Auto,7,*,Auto">

    <!--Top Bar-->
    <Grid Grid.Column="0" Grid.Row="0" Background="{DynamicResource ThemeBackgroundBrush}"
          ColumnDefinitions="Auto,*,Auto"
          RowDefinitions="50">

      <!--Top Bar Avatar-->
      <controls:AvatarControl
          Grid.Column="0"
          Width="40" Height="40"
          Margin="10,0,10,0"
          DataContext="{Binding TopBarAvatar}"/>

      <!--Group Name and Plugins Drop Down Menu Button-->
      <ToggleButton Grid.Column="1"
                    BorderThickness="0"
                    HorizontalAlignment="Left"
                    FontSize="17" FontWeight="SemiBold"
                    Background="{DynamicResource ThemeBackgroundBrush}"
                    x:Name="toggleGroupOptionsButton">

        <ToggleButton.Styles>
          <Style Selector="ToggleButton:checked /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}"/>
          </Style>
          <Style Selector="ToggleButton:pressed /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}"/>
          </Style>
        </ToggleButton.Styles>
        
        <!--Toggle Button Content, The Group Name and the Dropdown Arrow-->
        <Grid ColumnDefinitions="*,Auto" Background="{DynamicResource ThemeBackgroundBrush}">
          <!--Chat Name Label-->
          <!--TextTrimming="CharacterEllipsis"-->
          <TextBlock Grid.Column="0"
                  HorizontalAlignment="Stretch" VerticalAlignment="Center"
                  FontSize="17" FontWeight="SemiBold"
                  TextWrapping="NoWrap"
                  Text="{Binding Title}">
          </TextBlock>

          <!--Plugin Dropdown Arrow-->
          <iconPack:IconControl Grid.Column="1" Width="15" Height="15" Margin="5,0,0,0" Kind="PackIconOcticonsKind.TriangleDown">
            <i:Interaction.Behaviors>
              <ia:DataTriggerBehavior Binding="{Binding IsChecked, ElementName=toggleGroupOptionsButton}" ComparisonCondition="Equal" Value="True">
                <ia:ChangePropertyAction PropertyName="Kind" Value="PackIconOcticonsKind.TriangleUp"/>
              </ia:DataTriggerBehavior>
              <ia:DataTriggerBehavior Binding="{Binding IsChecked, ElementName=toggleGroupOptionsButton}" ComparisonCondition="NotEqual" Value="True">
                <ia:ChangePropertyAction PropertyName="Kind" Value="PackIconOcticonsKind.TriangleDown"/>
              </ia:DataTriggerBehavior>
            </i:Interaction.Behaviors>
          </iconPack:IconControl>
        </Grid>
      </ToggleButton>

      <!--Close Group Button-->
      <Button Grid.Column="2"
              HorizontalAlignment="Right"
              Width="35" Height="35"
              BorderThickness="0"
              Background="{DynamicResource ThemeBackgroundBrush}"
              Command="{Binding Path=CloseGroup}"
              CommandParameter="{Binding Path=.}">
        <iconPack:IconControl Width="15" Height="15" Kind="PackIconMaterialKind.Close" />
      </Button>

      <!--Top Bar Underline-->
      <Border Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="0" BorderBrush="{DynamicResource DividerLineBrush}" BorderThickness="0,0,0,1"/>
    </Grid>

    <!--Messages List-->
    <!--VirtualizingStackPanel.IsVirtualizing="True"
    VirtualizingStackPanel.VirtualizationMode="Standard"
    VirtualizingStackPanel.ScrollUnit="Pixel"-->
    <ListBox ItemsSource="{Binding MessagesSorted}"
             Grid.Row="2" Grid.Column="0"
             BorderThickness="0"
             Background="{DynamicResource MessageBackdropBrush}"
             UseLayoutRounding="True"
             SelectionMode="Multiple"
             ScrollViewer.VerticalScrollBarVisibility="Visible"
             ScrollViewer.HorizontalScrollBarVisibility="Disabled"
             DragDrop.AllowDrop="True"
             extensions:InfiniteScrollBehaviorPositionHelper.IsNotAtBottom="True"
             extensions:FileDragDropHelper.IsFileDragDropEnabled="True"
             extensions:FileDragDropHelper.FileDragDropTarget="{Binding Path=.}"
             x:Name="messagesList">

      <i:Interaction.Behaviors>
        <extensions:InfiniteScrollBehavior ReachedTopCommand="{Binding ReloadView}" />
      </i:Interaction.Behaviors>

      <ListBox.ItemsPanel>
        <ItemsPanelTemplate>
          <!--TODO 11-->
          <!--Use this to control virualization-->
          <StackPanel />
          <!--<VirtualizingStackPanel />-->
        </ItemsPanelTemplate>
      </ListBox.ItemsPanel>

      <ListBox.Styles>
        <Style Selector="ListBoxItem">
          <Setter Property="HorizontalContentAlignment" Value="Left"/>
          <Setter Property="VerticalContentAlignment" Value="Top"/>
          <!--<Setter Property="IsEnabled" Value="{Binding Path=DataContext.IsSelectionAllowed, RelativeSource={RelativeSource AncestorType=controls:GroupContentsControl}}"/>-->
          <Setter Property="ClipToBounds" Value="False" />
          
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ListBoxItem}">
                <Border BorderThickness="0"
                        x:Name="highlightBorder"
                        Margin="0" >
                  <ContentPresenter Name="PART_ContentPresenter"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="Transparent"
                                    BorderThickness="0"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    Content="{TemplateBinding Content}"
                                    Padding="0"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    HorizontalContentAlignment="Stretch"/>
                </Border>
                <!--<ControlTemplate.Triggers>
                  <Trigger Property="IsSelected" Value="true">
                    <Setter TargetName="highlightBorder" Property="BorderThickness" Value="3"/>
                    <Setter TargetName="highlightBorder" Property="BorderBrush" Value="#1873BA"/>
                  </Trigger>
                </ControlTemplate.Triggers>-->
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </ListBox.Styles>

      <ListBox.ItemTemplate>
        <DataTemplate>
          <ContentControl Content="{Binding Path=.}"
                          ClipToBounds="False"/>
        </DataTemplate>
      </ListBox.ItemTemplate>

      <!--<i:Interaction.Triggers>
        <i:EventTrigger EventName="SelectionChanged">
          <i:InvokeCommandAction Command="{Binding DataContext.SelectionChangedCommand, RelativeSource={RelativeSource AncestorType=controls:GroupContentsControl}}"
                                 CommandParameter="{Binding SelectedItems, ElementName=messagesList}" />
        </i:EventTrigger>
      </i:Interaction.Triggers>-->
    </ListBox>

    <!--Scroll-To-Bottom Button-->
    <Button Grid.Row="2"
            HorizontalAlignment="Right"
            VerticalAlignment="Bottom"
            Classes="round"
            Margin="0,0,30,20"
            IsVisible="{Binding Path=IsNotAtBottom, ElementName=messageList}"
            Command="{Binding #messagesList.Scroll.ScrollToEnd}"
            Background="{DynamicResource ScrollToBottomButtonBrush}"
            BorderBrush="{DynamicResource ScrollToBottomButtonBrush}" >
      <Button.Styles>
        <Style Selector="Button">
          <Setter Property="Template">
            <ControlTemplate>
              <Border CornerRadius="360" BorderThickness="0" Background="{TemplateBinding Background}">
                <ContentPresenter Name="PART_ContentPresenter"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  Content="{TemplateBinding Content}"
                                  Padding="{TemplateBinding Padding}"
                                  TextBlock.Foreground="{TemplateBinding Foreground}"
                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
              </Border>
            </ControlTemplate>
          </Setter>
        </Style>
        <Style Selector="Button:pressed /template/ ContentPresenter">
          <Setter Property="Background" Value="Transparent" />
        </Style>
        <Style Selector="Button:pressed /template/ Border">
          <Setter Property="Opacity" Value="0.8" />
        </Style>
      </Button.Styles>
      
      <Button.Content>
        <iconPack:IconControl Kind="PackIconMaterialKind.ArrowDown"
                              Width="17" Height="17"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="10"
                              Foreground="White"/>
      </Button.Content>
    </Button>

    <!--Plugins Dropdown List-->
    <Border Grid.Row="2"
            VerticalAlignment="Top"
            BorderThickness="20,10,20,30"
            BorderBrush="{DynamicResource PluginMenuBrush}"
            IsVisible="{Binding IsChecked, ElementName=toggleGroupOptionsButton}">
      <StackPanel Orientation="Vertical">
        <!--Regular Plugins-->
        <ItemsControl ItemsSource="{Binding GroupChatPlugins}" Background="{DynamicResource PluginMenuBrush}">
          <ItemsControl.ItemTemplate>
            <DataTemplate>
              <Button
                  Content="{Binding PluginName}"
                  Command="{Binding RelativeSource={RelativeSource FindAncestor, 
                                         AncestorType={x:Type controls:GroupContentsControl}}, Path=DataContext.GroupChatPluginActivated}"
                  CommandParameter="{Binding Path=.}"
                  HorizontalContentAlignment="Left"
                  Background="{DynamicResource PluginButtonBackgroundBrush}"
                  Foreground="{DynamicResource PluginButtonFontBrush}"
                  BorderThickness="0"
                  FontSize="14"
                  FontWeight="SemiBold"/>
            </DataTemplate>
          </ItemsControl.ItemTemplate>

          <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <StackPanel Spacing="5,5,5,5"/>
            </ItemsPanelTemplate>
          </ItemsControl.ItemsPanel>
        </ItemsControl>
      </StackPanel>
    </Border>

    <!--Send Message Bar-->
    <Grid Grid.Row="3"
          Background="{DynamicResource ThemeBackgroundBrush}"
          ColumnDefinitions="40,*,Auto,Auto"
          RowDefinitions="*, Auto">

      <!--Send Bar Top Line-->
      <Border Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="4"
              BorderBrush="{DynamicResource DividerLineBrush}" 
              BorderThickness="0,0,0,1"
              Height="4"
              Margin="0,0,0,0"
              VerticalAlignment="Bottom"/>

      <!--Message Effects Button-->
      <Button Command="{Binding OpenMessageSuggestions}"
              Classes="styleless"
              Grid.Row="1" Grid.Column="0"
              Width="15" Height="15"
              Background="{DynamicResource ThemeBackgroundBrush}"
              Foreground="{DynamicResource DividerLineBrush}">
        <iconPack:IconControl Kind="PackIconFontAwesomeKind.ReactBrands"/>
      </Button>
      
      <!--Message Text Box-->
      <!--extensions:MultiLineSendBox-->
      <!--extensions:FileDragDropHelper.IsFileDragDropEnabled="True"
      extensions:FileDragDropHelper.FileDragDropTarget="{Binding}"
      SpellCheck.IsEnabled="True"-->
      <!--VerticalContentAlignment="Center"-->
      <TextBox Grid.Row="1" Grid.Column="1"
               MinHeight="49"
               Classes="verticalCenter"
               HorizontalAlignment="Stretch"
               VerticalAlignment="Center"
               BorderBrush="Transparent"
               BorderThickness="0"
               FontSize="15"
               Watermark="Send a Message..."
               Text="{Binding Path=TypedMessageContents, Mode=TwoWay}">

        <i:Interaction.Behaviors>
          <extensions:TextBoxSendBehavior SendCommand="{Binding SendMessage}" />
        </i:Interaction.Behaviors>
      </TextBox>

      <!--Plus Button-->
      <Button Command="{Binding SendAttachment}"
              Classes="styleless"
              Grid.Row="1" Grid.Column="2"
              Width="15" Height="15"
              Background="{DynamicResource ThemeBackgroundBrush}"
              Foreground="{DynamicResource DividerLineBrush}"
              Margin="0,0,20,0">
        <iconPack:IconControl Kind="PackIconMaterialKind.Plus"/>
      </Button>
      
      <!--Send Message Button-->
      <Button Command="{Binding SendMessage}"
              Classes="styleless"
              Grid.Row="1" Grid.Column="3"
              Width="15" Height="15"
              Background="{DynamicResource ThemeBackgroundBrush}"
              Foreground="{DynamicResource DividerLineBrush}"
              Margin="0,0,30,0">
        <iconPack:IconControl Kind="PackIconMaterialKind.Send"/>
      </Button>
    </Grid>

    <!--Popup Dialog-->
    <ContentControl Content="{Binding PopupManager}"
                    Grid.RowSpan="4"
                    Grid.ColumnSpan="1"/>
</Grid>
</UserControl>
